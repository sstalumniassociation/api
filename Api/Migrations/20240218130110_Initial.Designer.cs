// <auto-generated />
using System;
using Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240218130110_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CtaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CtaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroImageAlt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Api.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BadgeImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Api.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Api.Entities.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<Guid>("AttendeesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid");

                    b.HasKey("AttendeesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("Api.Entities.Employee", b =>
                {
                    b.HasBaseType("Api.Entities.User");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Api.Entities.Member", b =>
                {
                    b.HasBaseType("Api.Entities.User");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Membership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Member");
                });

            modelBuilder.Entity("Api.Entities.ServiceAccount", b =>
                {
                    b.HasBaseType("Api.Entities.User");

                    b.Property<int>("ServiceAccountType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ServiceAccount");
                });

            modelBuilder.Entity("Api.Entities.SystemAdmin", b =>
                {
                    b.HasBaseType("Api.Entities.User");

                    b.HasDiscriminator().HasValue("SystemAdmin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df90f5ea-a236-413f-a6c1-ca9197427631"),
                            Email = "qinguan20040914@gmail.com",
                            FirebaseId = "GuZZVeOdlhNsf5dZGQmU2yV1Ox33",
                            Name = "Qin Guan"
                        });
                });

            modelBuilder.Entity("Api.Entities.AlumniMember", b =>
                {
                    b.HasBaseType("Api.Entities.Member");

                    b.Property<int?>("GraduationYear")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("GraduationYear");

                    b.HasDiscriminator().HasValue("AlumniMember");

                    b.HasData(
                        new
                        {
                            Id = new Guid("829bc4dc-2d8f-46df-acbb-c52c0e7f958f"),
                            Email = "tan_zheng_jie@sstaa.org",
                            FirebaseId = "5ZPERFPTvfMfxwhH7SGsOmXqSco2",
                            Name = "Tan Zheng Jie",
                            MemberId = "EXCO-1",
                            Membership = "Exco"
                        });
                });

            modelBuilder.Entity("Api.Entities.EmployeeMember", b =>
                {
                    b.HasBaseType("Api.Entities.Member");

                    b.Property<int?>("GraduationYear")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("integer")
                        .HasColumnName("GraduationYear");

                    b.HasDiscriminator().HasValue("EmployeeMember");
                });

            modelBuilder.Entity("Api.Entities.UserEvent", b =>
                {
                    b.HasOne("Api.Entities.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Entities.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("Api.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Entities.Event", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("Api.Entities.User", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
